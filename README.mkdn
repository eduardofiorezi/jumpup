# Jumpup

## What

Jumpup is a [Ruby on Rails][ror] plugin that provides a set of tasks to automate all steps of a [synchronous continuous integration][sci] process, that is, [continuous integration][ci] without a server such as [CruiseControl][cc]. Why? Because that's the way we like it!

## Installing

Add it to your Gemfile:

    group :development do
      gem 'jumpup'
    end

After installing the plugin is ready to be used and you will need to execute only one task in order to integrate your code safely:

    rake integrate

## Dependencies

* Git
* [Rcov][rc](Ruby 1.8) or [Simplecov][sc](Ruby 1.9) (optional)

## [ProTip] Using Simplecov

Using simplecov on your test suite will make your tests to run slower. You can fix it using an environment variable called "coverage" on test_helper.rb/spec_helper.rb to turn on/off the simplecov. See below:

spec_helper.rb or test_helper.rb

    if ENV['coverage'] == 'on'
      require 'simplecov'
      SimpleCov.start 'rails'
    end

The "coverage" variable is set to "on" by the integration process. When running tests/specs while you're developing, simplecov doesn't run, unless you set "coverage" environment variable by hand.

## Integration Steps

The integration process is composed of several steps that are explained ahead. It's possible to skip one or more steps and add other steps of your own. This will be demonstrated shortly. The complete set of steps are:

1. task git:status_check

  Check if all local files are under control of your scm.

* task log:clear

  Remove log files.

* task tmp:clear

  Remove temporary files.

* task backup:local

  Backup files locally. This is done before scm update to create a recovery point if you have problems during scm update. If a file merge creates undesirable effects on the software, you can recover from the backup file.
  Backup file names have a timestamp. By default, the last 30 backups are kept. You may change this number as you'll see shortly. This task won't work on Windows because it uses [tar][]. So, if you're using Windows you'll have to write your own version of this task or just stop using Windows. We highly recommend the later.

* task git:pull

  Update local files from your remote scm repository.

* task db:migrate

  Execute any new database migration created by other team members since the last integration.

* Your test/spec suite

  Set the rake task your test/spec suite needs to run. Use a command that generate the coverage files.

* coverage_verify

  Check if tests/specs cover 100% of the application code.

* git:push

  Push your changes. If any of the previous tasks break, because one test failed, for instance, the script won't push. Actually this task runs only if every checking done before work well.

Using this almost paranoid sequence of steps it will be hard to check in bad code in your repository, which is good, very good. The idea is that you should treat your repository as a sacred place, where only good code should ever enter.

### More examples

* Reckless programmer

  So you don't have tests, nor specs but you still want to use the jumpup. You might get away with this customized lib/tasks/integration.rake:

        INTEGRATION_TASKS = %w(
          jumpup:start
          db:migrate
          jumpup:finish
        )

  The fact that you can get away with this doesn't mean you should. Don't you think it's already time to grow up and become more professional about software development? I know you believe you have a great excuse to avoid writing those tests or specs. Still it's just an excuse. Write tests or write specs and make a better world!

* Test conscious programmer

   You haven't jumped on the [BDD][BDD] bandwagon yet. Instead, you write tests, which is good, but they don't cover all of your code yet, which is bad. We believe you will improve it and make sure your tests cover 100% of your code. In the meantime you might need to skip coverage checkings. Oh, you also don't use [Selenium][sor]. Shame on you! Try this:

        INTEGRATION_TASKS = %w(
          jumpup:start
          db:migrate
          test
          jumpup:finish
        )

  As a matter of fact, since this case might be very common, **we decided to create a lib/tasks/integration.rake for you once the plugin has been installed. It has this very configuration and you can use it as a starting point to customize your integration process**.

* Spec infected programmer

  So you used to [TDD][TDD] all around but then someone told you that this is for gramma. The new wave has a name on it: [BDD][BDD]. So, of course, you now have specs covering 100% of your code and doesn't have any more tests. Great! Just do it:

        INTEGRATION_TASKS = %w(
          jumpup:start
          db:migrate
          spec
          jumpup:coverage_verify
          jumpup:finish
        )

## Quality check

Jumpup has included some tasks to check quality. Just run `$ rake quality:check`.

## Versioning

Jumpup follows the [Semantic Versioning](http://semver.org/).

## Issues

If you have problems, please create a [Github Issue](https://github.com/Helabs/jumpup/issues).

## Contributing

Please see [CONTRIBUTING.md](https://github.com/Helabs/jumpup/blob/master/CONTRIBUTING.md) for details.

## Release

Follow this steps to release a new version of the gem.

1. Test if everything is running ok;
1. Change version of the gem on `VERSION` constant;
1. Add the release date on the `CHANGELOG`;
1. Do a commit "Bump version x.x.x", follow the semantic version;
1. Run `$ rake release`, this will send the gem to the rubygems;
1. Check if the gem is on the rubygems and the tags are correct on the github;

## License

This code is free to be used under the terms of the [MIT license][mit].

## Contact

Comments are welcome.

## Authors

Jumpup came from the idea of [integration](https://github.com/tapajos/integration). Thanks to [Improve It][ii] and the original authors:

* [Marcos Tapajós][mt]
* [Sylvestre Mergulhão][sm]
* [Vinícius Teles][vt]

## Credits

Jumpup is maintained and funded by [HE:labs](http://helabs.com.br/opensource/).
Thank you to all the [contributors](https://github.com/Helabs/jumpup/graphs/contributors).


[piston]:  http://piston.rubyforge.org/
[mt]:    https://github.com/tapajos
[sm]:   https://github.com/mergulhao
[vt]:    http://www.improveit.com.br/vinicius
[f]:    http://rubyforge.org/forum/?group_id=4662
[s]:    http://subversion.tigris.org
[git]:  http://git.or.cz/
[rc]:    http://eigenclass.org/hiki.rb?rcov
[sc]:    https://github.com/colszowka/simplecov
[sor]:  http://selenium-on-rails.openqa.org
[rs]:    http://rspec.info
[rz]:    http://rubyzip.sourceforge.net/
[ror]:  http://www.rubyonrails.org
[sci]:  http://jamesshore.com/Blog/Why%20I%20Dont%20Like%20CruiseControl.html
[co]:    http://www.improveit.com.br/en/contact
[mit]:  http://www.opensource.org/licenses/mit-license.php
[ci]:   http://martinfowler.com/articles/continuousIntegration.html
[cc]:   http://cruisecontrol.sourceforge.net
[tar]:  http://en.wikipedia.org/wiki/Tar_%28file_format%29
[BDD]:  http://en.wikipedia.org/wiki/Behavior_driven_development
[TDD]:  http://en.wikipedia.org/wiki/Test-driven_development
[ii]:   http://www.improveit.com.br
